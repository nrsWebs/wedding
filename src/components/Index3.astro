---
import Arrow from '@/assets/images/arrow.svg'
import Hearts from '@/assets/images/hearts.svg'
import HeartArrow from '@/assets/images/heart-arrow.svg'

import { db } from 'astro:db';
import { Confirmation } from 'astro:db';


if (Astro.request.method === 'POST') {
    // Analizar datos de formulario
    const formData = await Astro.request.formData();
    const names = formData.getAll('name[]');

    const platos: string[] = [];
    for (let i = 0; i < names.length; i++) {
        const plato = formData.get(`plato_${i}`);
        platos.push(plato?.toString() ?? 'no especificado');
    }

    const records = names.map((name, i) => ({
        name: name.toString(),
        confirmation: true,
        plato: platos[i],
    }));

    await db.insert(Confirmation).values(records);
}
---

<div id="container" class="bg-(--color-white)">
	<main x-data="{ showModal: false }">
        <section id="header" class="w-[85vw] h-[40px] flex justify-between m-auto z-10 top-0 max-w-[1440px]">
            <div class="heart-montaje flex justify-center align-center relative opacity-[0.7] w-auto h-[40px] text-transparent">
                <Arrow class="rotate-[-90deg] relative" width={40} height={40}/>
                <Hearts class="heart absolute h-[40px]" width={40} height={40}/>
                <Arrow class="rotate-[90deg] relative" width={40} height={40}/>
            </div>
            <button 
                @click="showModal = true" 
                class="b-confirma border-[0.7px] flex justify-center items-center py-2 px-4 rounded-full h-[30px] cursor-pointer mt-auto mb-auto">
                Confirma
            </button>       
        </section>
        <section id="hero" 
            class="w-[100vw] max-w-[1440px] bg-white relative flex justify-center items-center gap-10 m-auto relative p-[20px]"
            >
            <div class="carousel w-full h-full flex justify-center items-center gap-10">
                <!-- LUGAR -->
                <div 
                    class="card z-2 opacity-90 bg-(--color-brown) flex justify-center items-center relative max-h-[70vh] aspect-[1/2] rounded-lg " 
                    x-data="{ hovered: false }"
                    @mouseenter="hovered = true"
                    @mouseleave="hovered = false"
                >
                    <p  
                        class="font-(family-name:--font-bettersaturday) text-white text-4xl"
                        :class="{ 'neon-text': hovered }"
                    >
                        Lugar
                    </p>
                    <div
                        class="opacity-0 transition-all duration-400 bg-white/30 backdrop-blur-md rounded-lg
                            flex justify-center items-center flex-col gap-y-50 absolute w-full h-full top-0 left-0"
                        :class="{ 'opacity-100 ': hovered }">
                        <div class="w-[100%] h-[100%] flex justify-center items-center flex-col gap-y-10">
                            <p class="text-white font-(family-name:--font-noto) text-7xl">Masia "El Xaloc"</p>
                            <a href="https://maps.app.goo.gl/D723XZKGkBAtSMuVA" target="_blank" class="hover:underline">
                                Ctra. Manresa - Vic, Km. 11, 08275 Calders, Barcelona
                            </a>
                        </div>
                    </div>
                </div>
                <!-- HORARIO -->
                <div 
                    class="card z-2 opacity-90 bg-(--color-red) flex justify-center items-center relative max-h-[70vh] aspect-[1/2] rounded-lg " 
                    x-data="{ hovered: false }"
                    @mouseenter="hovered = true"
                    @mouseleave="hovered = false"
                >
                    <p  
                        class="font-(family-name:--font-bettersaturday) text-white text-4xl"
                        :class="{ 'neon-text': hovered }"
                    >
                        Horario
                    </p>
                    <div
                        class="opacity-0 transition-all duration-400 bg-white/30 backdrop-blur-md rounded-lg
                            flex justify-center items-center flex-col gap-y-50 absolute w-full h-full top-0 left-0"
                        :class="{ 'opacity-100 ': hovered }">
                        <div class="w-[80%] flex flex-col justify-evenly items-center">
                        <div class="flex justify-between items-center flex-col gap-y-8">
                            <span class="font-(family-name:--font-noto)) text-2xl"> 18:00h </span>
                            <span class="font-(family-name:--font-bettersaturday) text-4xl"> Ceremonia </span>
                        </div>
                        <HeartArrow width={60} height={60} />
                        <div class="flex justify-between items-center flex-col gap-y-8">
                            <span class="font-(family-name:--font-noto)) text-2xl"> 19:00h </span>
                            <span class="font-(family-name:--font-bettersaturday) text-4xl"> Cocktail </span>
                        </div>
                        <HeartArrow width={60} height={60} />
                        <div class="flex justify-between items-center flex-col gap-y-8">
                            <span class="font-(family-name:--font-noto)) text-2xl"> 20:00h </span>
                            <span class="font-(family-name:--font-bettersaturday) text-4xl"> Cena </span>
                        </div>
                    </div>
                    </div>
                </div>
                <!-- COUNTDOWN -->
                <div 
                    class="card z-2 opacity-90 bg-(--color-orange) flex justify-center items-center relative max-h-[70vh] aspect-[1/2] rounded-lg " 
                    x-data="{ hovered: false }"
                    @mouseenter="hovered = true"
                    @mouseleave="hovered = false"
                >
                    <div  
                        class="font-(family-name:--font-bettersaturday) text-white text-4xl text-center"
                        :class="{ 'neon-text': hovered }"
                    >
                        <div class="flex justify-center gap-6 text-4xl font-mono p-4">
                            <div>
                                <div  class="font-(family-name:--font-noto)) text-2xl"><span id="days">--</span> d√≠as</div>
                            </div>
                            <div>
                                <div class="font-(family-name:--font-noto)) text-2xl"><span id="hours">--</span> h</div>
                            </div>
                            <div>
                                <div class="font-(family-name:--font-noto)) text-2xl"><span id="minutes">--</span> m</div>
                            </div>
                            <div>
                                <div class="font-(family-name:--font-noto)) text-2xl"><span id="seconds">--</span> s</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- DATE -->
            <h1 class="font-(family-name:--font-noto) text-9xl font-bold 
                bg-clip-text text-transparent bg-[url('/images/background.webp')] bg-contain text-stroke 
                opacity-0 transition-opacity duration-2000 z-3 delay-200 
                font-(family-name:--font-noto))
                w-[90vw] h-auto m-auto
                absolute text-center top-[40%] left-[50%] translate-x-[-50%] translate-y-[-40%]" 
                x-data="{ heroMoveUp: false }" 
                x-intersect="$el.classList.add('animate-heartbeat')"
                x-init="setTimeout(() => heroMoveUp = true, 2000)"
                :class="{ 'animate-hero-up': heroMoveUp }">
            01 - 11 - 2025 
            </h1>
            <!-- NAMES -->
            <div class="opacity-0 transition-opacity duration-2000 z-2 delay-300 
                font-(family-name:--font-bettersaturday) 
                text-3xl
                w-[90vw] h-auto m-auto
                absolute text-center top-[80%] left-[50%] translate-x-[-50%] translate-y-[-80%]" 
                x-data="{ heroMoveDown: false }"  
                x-intersect="$el.classList.add('opacity-100')"
                x-init="setTimeout(() => heroMoveDown = true, 1500)"
                :class="{ 'animate-hero-down': heroMoveDown }"
                >
                Alba y Cristian
            </div>

        </section>



        <!-- Modal con Alpine.js -->
        <div 
            x-show="showModal" 
            x-transition 
            class="fixed inset-0 flex justify-center items-center z-50"
            style="display: none;"
        >
            <div class="absolute inset-0 bg-(--color-green) opacity-90" >  </div>
            <div 
                class="bg-white opacity-100 p-6 rounded-xl w-[50vw] space-y-4 shadow-xl relative"
                @click.outside="showModal = false"
            >
                <form id="confirmForm" class="space-y-4 font-noto" method="POST">
                    <div id="personContainer" class="space-y-6">
                        <!-- Persona individual -->
                        <div class="person space-y-3">
                        <!-- Nombre -->
                        <div class="w-full min-w-[200px]">
                            <div class="relative">
                            <label
                                class="cursor-text bg-white px-1 left-2.5 top-2.5 text-black text-sm transition-all transform origin-left peer-focus:-top-2 peer-focus:left-2.5 peer-focus:text-xs peer-focus:text-black peer-focus:scale-90"
                            >
                                Nombre
                            </label>
                            <input
                                type="text"
                                name="name[]"
                                required
                                class="peer w-full bg-transparent placeholder:text-black text-black text-sm border border-black rounded-md px-3 py-2 transition duration-300 ease focus:outline-none focus:border-black hover:border-neutral-800 shadow-sm focus:shadow"
                            />
                            
                            </div>
                        </div>

                        <!-- Plato -->
                        <div class="space-y-2">
                            <p class="text-sm font-medium text-black">
                            Elige el plato principal:
                            </p>
                            <div class="flex gap-6">
                            <label class="flex items-center gap-2 text-black">
                                <input type="radio" name="plato_0" value="carne" required class="accent-blue-600" />
                                Carne
                            </label>
                            <label class="flex items-center gap-2 text-black">
                                <input type="radio" name="plato_0" value="pescado" class="accent-blue-600" />
                                Pescado
                            </label>
                            </div>
                        </div>
                        </div>
                    </div>

                    <!-- Bot√≥n para a√±adir m√°s personas -->
                    <button
                    type="button"
                    id="addPersonBtn"
                    class="text-sm px-3 py-1 bg-(--color-green) text-white rounded"
                    >
                    A√±adir persona
                    </button>

                    <!-- Botones -->
                    <div class="flex justify-end gap-2 mt-4">
                        <button
                        type="submit"
                        class="text-sm px-3 py-1 border border-black text-black rounded"
                        >
                        Confirmar
                        </button>
                    </div>
                </form>
                <!-- Script para el cliente -->
                <script is:client>
                    let personCount = 1;

                    document.getElementById("addPersonBtn").addEventListener("click", () => {
                    const container = document.getElementById("personContainer");
                    const template = container.querySelector(".person");
                    const clone = template.cloneNode(true);

                    const inputs = clone.querySelectorAll("input");
                    inputs.forEach((input) => {
                        if (input.type === "text") input.value = "";
                        if (input.type === "radio") {
                        input.checked = false;
                        input.name = `plato_${personCount}`;
                        }
                    });

                    container.appendChild(clone);
                    personCount++;
                    });
                </script>
            </div>
        </div>
        <script is:inline>

            const targetDate = new Date("2025-11-01T18:00:00").getTime();

            function updateCountdown() {
                console.log("Updating countdown..."); // Debugging line
                // Get today's date and time
                var now = new Date().getTime();

                // Find the distance between now and the count down date
                var distance = targetDate - now;

                // Time calculations for days, hours, minutes and seconds
                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                console.log("Countdown values:", { days, hours, minutes, seconds }); // Debugging line

                document.getElementById('days').textContent = days;
                document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
                document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
                document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
            }
            console.log("Countdown initialized with target date:", targetDate); // Debugging line
            updateCountdown();
            const interval = setInterval(updateCountdown, 1000);
        </script>
    </main>
</div>